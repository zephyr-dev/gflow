#! /usr/bin/env ruby
require 'pry'

# find main branch
# find new version of main
# checkout branch
# rebase integration
# checkout story brnach
# rebase onto


class Rebaser < Struct.new(:track_type, :track_name, :story)

  def rebase
    if story.match("main")
      puts "Cannot rebase from main; just rbi"
      exit 1
    end
    
    main_branch = find_main_branch

    if main_branch.match("-v\d*")
      new_branch = increment_branch_version(main_branch)
    else
      new_branch = "main-v1"
    end
    `git co -b #{branch_for_story(new_branch)} `
  end

  private

  def increment_branch_version(old_main)
    
  end

  def find_main_branch
    branches = `git branch -a | grep #{branch_prefix} | grep main | grep -v remotes`.split("\n")
    branches.sort.last.split("/").last
  end

  def branch_for_story(story)
    "#{branch_prefix}/#{story}"
  end

  def branch_prefix
    "#{track_type}/#{track_name}"
  end
  
end

current_branch = `git rev-parse --abbrev-ref HEAD | awk '{ print $1 }'`.chomp
track_type, track_name, story_name = current_branch.split("/")

unless track_type == 'track'
  puts "Must be on a track branch."
  exit 1
end

rebaser = Rebaser.new(track_type, track_name, story_name)
rebaser.rebase

#setup
#create empty git directory
#create integration branch
#add and commit integration.file
#
#git co -b track/track_name/main
#add and commit main.file
#
#git co -b track/track_name/story_1
#add and commit story1.file
#
#git co track/track_name/main
#
#git co -b track/track_name/story_2
#add and commit story2.file
#
#git co track/track_name/main
#add and commit main2.file
#
#git co integration
#add and commit integration2.file
#
